phase 1
和一个地址开始的字符串匹配

phase 2
首项为1的等比数列

phase 3
多种答案,以第一个数决定跳转位置,确定第二个数大小

phase 4
递归, 2个数, 看出来1 0, 没仔细看

phase 5
长度为6的字符串匹配, 不过是以输入的ascii码的最后一位为数组序号,确定字符串,是以一个地址为起始的.

phase 6
以6个输入数字取反作为下标确定从大到小的排序,其中数字是以0x6032d0为起始的链表, 排序然后确定输入, 需要来回映射.

secret phase
反汇编时看到了secret_phase 但没有调用,应该有隐藏.发现在phase_defused中有, 发现需要字符串匹配,确定是第四题需要DrEvil进入
主体是func7 递归
忘记了call的用法会返回到下一条指令执行
func7 类似于, 其中*a按地址分别为: 36 8 22 20 然后a=0 答案 22 20都行

int func7(int a[], int b)
{
    if (a == 0)
        x = -1;
    if (*a > b) {
        x = func7(a + 1, b);
        x *= 2;
    } else {
        x = 0;
        if (*a == b)
            return x;
        else {
            func7(a + 2, b);
            x = 2 * x + 1;
        }
    }

    return x;
}


